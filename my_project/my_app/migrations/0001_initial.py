# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2015-12-28 20:47
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=30, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AvailabilityStatus',
            fields=[
                ('avl_status_id', models.AutoField(db_column='Avl_Status_Id', primary_key=True, serialize=False)),
                ('avl_status_name', models.CharField(blank=True, db_column='Avl_Status_Name', max_length=45, null=True)),
                ('avl_status_remarks', models.CharField(blank=True, db_column='Avl_Status_Remarks', max_length=45, null=True)),
            ],
            options={
                'db_table': 'availability_status',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MaterialClass',
            fields=[
                ('material_class_id', models.IntegerField(db_column='Material_Class_ID', primary_key=True, serialize=False)),
                ('material_class_manufacturer', models.CharField(blank=True, db_column='Material_Class_Manufacturer', max_length=100, null=True)),
                ('material_class_manufac_part_no', models.CharField(blank=True, db_column='Material_Class_Manufac_part_no', max_length=100, null=True)),
                ('material_class_handling', models.CharField(blank=True, db_column='Material_Class_Handling', max_length=100, null=True)),
                ('material_class_cleaning', models.CharField(blank=True, db_column='Material_Class_Cleaning', max_length=100, null=True)),
                ('material_class_disposition', models.CharField(blank=True, db_column='Material_Class_Disposition', max_length=100, null=True)),
            ],
            options={
                'db_table': 'material_class',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MovementFunction',
            fields=[
                ('movement_function_id', models.FloatField(db_column='Movement_Function_ID', primary_key=True, serialize=False)),
                ('movement_function_name', models.CharField(blank=True, db_column='Movement_Function_Name', max_length=45, null=True)),
                ('movement_function_version', models.CharField(blank=True, db_column='Movement_Function_Version', max_length=45, null=True)),
                ('movement_function_date', models.DateTimeField(blank=True, db_column='Movement_Function_Date', null=True)),
            ],
            options={
                'db_table': 'movement_function',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Movements',
            fields=[
                ('movements_id', models.FloatField(db_column='Movements_ID', primary_key=True, serialize=False)),
                ('movements_params', models.CharField(blank=True, db_column='Movements_Params', max_length=256, null=True)),
                ('movements_short_name', models.CharField(blank=True, db_column='Movements_Short_Name', max_length=45, null=True)),
                ('movements_long_name', models.CharField(blank=True, db_column='Movements_Long_Name', max_length=256, null=True)),
                ('movements_version', models.CharField(blank=True, db_column='Movements_Version', max_length=45, null=True)),
                ('movements_created_date', models.DateTimeField(blank=True, db_column='Movements_Created_Date', null=True)),
            ],
            options={
                'db_table': 'movements',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MvmtStatus',
            fields=[
                ('mvmt_status_id', models.AutoField(db_column='MVMT_Status_Id', primary_key=True, serialize=False)),
                ('mvmt_status_name', models.CharField(blank=True, db_column='MVMT_Status_Name', max_length=45, null=True)),
                ('mvmt_status_remarks', models.CharField(blank=True, db_column='MVMT_Status_Remarks', max_length=45, null=True)),
            ],
            options={
                'db_table': 'mvmt_status',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('org_id', models.CharField(db_column='Org_ID', max_length=100, primary_key=True, serialize=False)),
                ('org_name', models.TextField(db_column='Org_Name')),
            ],
            options={
                'db_table': 'organization',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Percepts',
            fields=[
                ('percepts_id', models.AutoField(db_column='Percepts_ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'percepts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PerceptsValue',
            fields=[
                ('percepts_value_id', models.FloatField(db_column='Percepts_Value_ID', primary_key=True, serialize=False)),
                ('percepts_signal_id', models.FloatField(blank=True, db_column='Percepts_Signal_ID', null=True)),
                ('percepts_value', models.CharField(blank=True, db_column='Percepts_Value', max_length=512, null=True)),
                ('percepts_comments', models.CharField(blank=True, db_column='Percepts_Comments', max_length=256, null=True)),
            ],
            options={
                'db_table': 'percepts_value',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PerceptValStatus',
            fields=[
                ('pval_status_id', models.AutoField(db_column='PVal_Status_Id', primary_key=True, serialize=False)),
                ('pval_status_name', models.CharField(blank=True, db_column='PVal_Status_Name', max_length=45, null=True)),
                ('pval_status_remarks', models.CharField(blank=True, db_column='Pval_Status_Remarks', max_length=45, null=True)),
            ],
            options={
                'db_table': 'percept_val_status',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProcStep',
            fields=[
                ('proc_step_id', models.IntegerField(db_column='Proc_Step_ID', primary_key=True, serialize=False)),
                ('proc_step_name', models.CharField(blank=True, db_column='Proc_step_Name', max_length=45, null=True)),
            ],
            options={
                'db_table': 'proc_step',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('project_id', models.FloatField(db_column='Project_ID', primary_key=True, serialize=False)),
                ('project_title', models.CharField(db_column='Project_Title', max_length=100)),
                ('project_client_ref', models.CharField(blank=True, db_column='Project_Client_Ref', max_length=100, null=True)),
            ],
            options={
                'db_table': 'project',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectMember',
            fields=[
                ('project_member_id', models.AutoField(db_column='Project_Member_ID', primary_key=True, serialize=False)),
                ('project_member_name', models.CharField(blank=True, db_column='Project_Member_Name', max_length=256, null=True)),
                ('project_member_email', models.CharField(blank=True, db_column='Project_Member_Email', max_length=256, null=True)),
                ('project_member_phone', models.CharField(blank=True, db_column='Project_Member_Phone', max_length=45, null=True)),
                ('project_member_address', models.CharField(blank=True, db_column='Project_Member_Address', max_length=256, null=True)),
            ],
            options={
                'db_table': 'project_member',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectMemberRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_member_role_roles', models.CharField(db_column='Project_Member_Role_Roles', max_length=100)),
            ],
            options={
                'db_table': 'project_member_role',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectTests',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'project_tests',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProjStatusT',
            fields=[
                ('proj_status_id', models.IntegerField(db_column='Proj_Status_ID', primary_key=True, serialize=False)),
                ('proj_status_name', models.CharField(blank=True, db_column='Proj_Status_Name', max_length=45, null=True)),
                ('proj_status_remarks', models.CharField(blank=True, db_column='Proj_Status_Remarks', max_length=45, null=True)),
            ],
            options={
                'db_table': 'proj_status_t',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('report_id', models.FloatField(db_column='Report_ID', primary_key=True, serialize=False)),
                ('report_name', models.CharField(blank=True, db_column='Report_Name', max_length=45, null=True)),
                ('report_date', models.DateTimeField(blank=True, db_column='Report_Date', null=True)),
                ('report_template', models.CharField(blank=True, db_column='Report_Template', max_length=45, null=True)),
                ('report_specimen', models.CharField(blank=True, db_column='Report_Specimen', max_length=1024, null=True)),
                ('report_tests_m_trials', models.CharField(blank=True, db_column='Report_Tests_M_Trials', max_length=1024, null=True)),
            ],
            options={
                'db_table': 'report',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ReportFields',
            fields=[
                ('report_fields_id', models.FloatField(db_column='Report_Fields_ID', primary_key=True, serialize=False)),
                ('report_fields_content', models.CharField(blank=True, db_column='Report_Fields_Content', max_length=45, null=True)),
                ('report_fields_field_id', models.FloatField(blank=True, db_column='Report_Fields_Field_ID', null=True)),
            ],
            options={
                'db_table': 'report_fields',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ReportFigure',
            fields=[
                ('report_figure_id', models.FloatField(db_column='Report_Figure_ID', primary_key=True, serialize=False)),
                ('report_figure_figure', models.TextField(blank=True, db_column='Report_Figure_Figure', null=True)),
                ('report_figure_caption', models.CharField(blank=True, db_column='Report_Figure_Caption', max_length=45, null=True)),
                ('report_figure_type', models.CharField(blank=True, db_column='Report_Figure_Type', max_length=45, null=True)),
            ],
            options={
                'db_table': 'report_figure',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Signal',
            fields=[
                ('signal_id', models.FloatField(db_column='Signal_ID', primary_key=True, serialize=False)),
                ('signal_name', models.CharField(blank=True, db_column='Signal_Name', max_length=45, null=True, unique=True)),
                ('signal_date', models.DateTimeField(blank=True, db_column='Signal_Date', null=True)),
                ('signal_version', models.CharField(blank=True, db_column='Signal_Version', max_length=45, null=True)),
                ('signal_param', models.CharField(blank=True, db_column='Signal_Param', max_length=512, null=True)),
            ],
            options={
                'db_table': 'signal',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Specimen',
            fields=[
                ('specimen_id', models.FloatField(db_column='Specimen_ID', primary_key=True, serialize=False)),
                ('specimen_name', models.CharField(blank=True, db_column='Specimen_Name', max_length=256, null=True)),
                ('specimen_date', models.DateTimeField(blank=True, db_column='Specimen_Date', null=True)),
                ('specimen_prep_notes', models.CharField(blank=True, db_column='Specimen_Prep_Notes', max_length=512, null=True)),
                ('specimen_comments', models.CharField(blank=True, db_column='Specimen_Comments', max_length=512, null=True)),
                ('specimen_current_disposition', models.CharField(blank=True, db_column='Specimen_Current_Disposition', max_length=100, null=True)),
                ('specimen_final_disposition', models.CharField(blank=True, db_column='Specimen_Final_Disposition', max_length=100, null=True)),
                ('specimen_display_number', models.IntegerField(blank=True, db_column='Specimen_Display_Number', null=True)),
            ],
            options={
                'db_table': 'specimen',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Standards',
            fields=[
                ('standards_id', models.FloatField(db_column='Standards_ID', primary_key=True, serialize=False)),
                ('standards_name', models.CharField(blank=True, db_column='Standards_Name', max_length=45, null=True)),
                ('standards_version', models.CharField(blank=True, db_column='Standards_Version', max_length=45, null=True)),
                ('standards_date', models.DateTimeField(blank=True, db_column='Standards_Date', null=True)),
                ('standards_comments', models.CharField(blank=True, db_column='Standards_Comments', max_length=512, null=True)),
            ],
            options={
                'db_table': 'standards',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('test_test_id', models.FloatField(db_column='Test_Test_ID', primary_key=True, serialize=False)),
                ('test_desired_orient', models.IntegerField(blank=True, db_column='Test_Desired_Orient', null=True)),
                ('test_actual_orient', models.IntegerField(blank=True, db_column='Test_Actual_Orient', null=True)),
                ('test_operator', models.CharField(blank=True, db_column='Test_Operator', max_length=45, null=True)),
                ('test_bt_serial', models.CharField(blank=True, db_column='Test_BT_Serial', max_length=100, null=True)),
                ('test_bt_firmware', models.CharField(blank=True, db_column='TEST_BT_Firmware', max_length=100, null=True)),
                ('test_software_ver', models.CharField(blank=True, db_column='Test_Software_Ver', max_length=45, null=True)),
                ('test_before_picture', models.TextField(blank=True, db_column='Test_Before_Picture', null=True)),
                ('test_after_picture', models.TextField(blank=True, db_column='Test_After_Picture', null=True)),
            ],
            options={
                'db_table': 'test',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TestMachine',
            fields=[
                ('test_machine_serial', models.FloatField(db_column='Test_Machine_Serial', primary_key=True, serialize=False)),
                ('test_machine_version', models.CharField(blank=True, db_column='Test_Machine_Version', max_length=45, null=True)),
            ],
            options={
                'db_table': 'test_machine',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TestMTrials',
            fields=[
                ('test_m_trials_id', models.FloatField(db_column='Test_M_Trials_ID', primary_key=True, serialize=False)),
                ('test_m_trials_start_location', models.CharField(blank=True, db_column='Test_M_Trials_Start_Location', max_length=45, null=True)),
                ('test_m_trials_date', models.DateTimeField(blank=True, db_column='Test_M_Trials_Date', null=True)),
                ('test_m_trials_comments', models.CharField(blank=True, db_column='Test_M_Trials_Comments', max_length=45, null=True)),
            ],
            options={
                'db_table': 'test_m_trials',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TestSequence',
            fields=[
                ('test_seq_id', models.IntegerField(db_column='Test_Seq_ID', primary_key=True, serialize=False)),
                ('test_seq_name', models.CharField(blank=True, db_column='Test_Seq_Name', max_length=45, null=True)),
                ('test_seq_standard', models.IntegerField(blank=True, db_column='Test_Seq_Standard', null=True)),
            ],
            options={
                'db_table': 'test_sequence',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Testtable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(blank=True, max_length=45, null=True)),
                ('image', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'testtable',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TmtStatus',
            fields=[
                ('tmt_status_id', models.AutoField(db_column='TMT_Status_ID', primary_key=True, serialize=False)),
                ('tmt_status_name', models.CharField(blank=True, db_column='TMT_Status_Name', max_length=45, null=True)),
                ('tmt_status_remarks', models.CharField(blank=True, db_column='TMT_Status_Remarks', max_length=128, null=True)),
            ],
            options={
                'db_table': 'tmt_status',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectStatus',
            fields=[
                ('project_status_project', models.OneToOneField(db_column='Project_Status_Project_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='my_app.Project')),
                ('project_status_date', models.DateTimeField(blank=True, db_column='Project_Status_Date', null=True)),
                ('project_status_comment', models.CharField(blank=True, db_column='Project_Status_Comment', max_length=512, null=True)),
                ('project_status_admin_id', models.IntegerField(blank=True, db_column='Project_Status_Admin_ID', null=True)),
            ],
            options={
                'db_table': 'project_status',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProjectSupplement',
            fields=[
                ('project_supplement_project', models.OneToOneField(db_column='Project_Supplement_Project_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='my_app.Project')),
                ('project_supplement_rush', models.IntegerField(blank=True, db_column='Project_Supplement_Rush', null=True)),
                ('project_supplement_material_info', models.CharField(blank=True, db_column='Project_Supplement_Material_Info', max_length=512, null=True)),
                ('project_supplement_objectives', models.CharField(blank=True, db_column='Project_Supplement_Objectives', max_length=512, null=True)),
                ('project_supplement_internal_notes', models.CharField(blank=True, db_column='Project_Supplement_Internal_Notes', max_length=512, null=True)),
                ('project_supplement_other_notes', models.CharField(blank=True, db_column='Project_Supplement_Other_Notes', max_length=512, null=True)),
                ('project_supplement_internal_poc', models.TextField(blank=True, db_column='Project_Supplement_Internal_POC', null=True)),
            ],
            options={
                'db_table': 'project_supplement',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RawData',
            fields=[
                ('raw_data', models.OneToOneField(db_column='Raw_Data_Id', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='my_app.TestMTrials')),
                ('raw_data_data', models.TextField(blank=True, db_column='Raw_Data_Data', null=True)),
            ],
            options={
                'db_table': 'raw_data',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ServiceLog',
            fields=[
                ('service_log_machine', models.OneToOneField(db_column='Service_Log_Machine_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='my_app.TestMachine')),
                ('service_log_date', models.DateTimeField(blank=True, db_column='Service_Log_Date', null=True)),
                ('service_log_admin', models.CharField(blank=True, db_column='Service_Log_Admin', max_length=256, null=True)),
                ('service_log_notes', models.CharField(blank=True, db_column='Service_Log_Notes', max_length=512, null=True)),
                ('service_log_status', models.CharField(blank=True, db_column='Service_Log_Status', max_length=45, null=True)),
            ],
            options={
                'db_table': 'service_log',
                'managed': False,
            },
        ),
    ]
